#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Initialize some default values
  hosts: all
  connection: ssh
  tasks:
    - name: set facts
      tags: [always]
      block:
        - set_fact:
            private_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        - set_fact:
            zookeeperServers: "{{ groups['zookeeper'] | map('extract', hostvars, ['ansible_default_ipv4',     'address']) | map('regex_replace', '^(.*)$', '\\1:2181') | join(',') }}"
            serviceUrl: "pulsar://{{ hostvars[groups['pulsar'][0]].private_ip }}:6650/"
            httpUrl: "http://{{ hostvars[groups['pulsar'][0]].private_ip }}:8080/"
        - set_fact:
            pulsar_version: "{{ pulsar_version | default('2.11.1') }}"
            kop_version: "{{ kop_version | default('2.11.1.3') }}"
            node_exporter_version: "{{ node_exporter_version | default('1.2.2') }}"
            prometheus_version: "{{ prometheus_version | default('2.31.1') }}"
            disk_dev: "{{ disk_dev | default(['/dev/nvme1n1']) }}"
            zk_mount_path: "{{ zk_mount_path | default('/mnt/zookeeper') }}"
            pb_mount_path: "{{ pb_mount_path | default('/mnt/pulsar_bookie') }}"
        - set_fact:
            pulsar_binary:
              src: "https://mirrors.ustc.edu.cn/apache/pulsar/pulsar-{{ pulsar_version }}/apache-pulsar-{{ pulsar_version }}-bin.tar.gz"
              remote: yes
          when:
            - pulsar_binary is not defined
            - kop_on is defined
        #        - set_fact:
        #            node_exporter_binary:
        #              src: "https://github.com/prometheus/node_exporter/releases/download/v{{     node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
        #              remote: yes
        #          when: node_exporter_binary is not defined
        #        - set_fact:
        #            prometheus_binary:
        #              src: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/   prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
        #              remote: yes
        #          when: prometheus_binary is not defined
        - set_fact:
            protocol_handlers:
              - { protocol: "kafka", local_path: "/home/ubuntu/pkg/protocols/pulsar-protocol-handler-kafka-{{ kop_version }}.nar", conf: "kop.conf" }
          when: protocol_handlers is not defined

- name: Format and mount disks for Zookeeper hosts
  hosts: zookeeper
  connection: ssh
  become: true
  vars:
    zk_path_list:
      - "{{ zk_mount_path }}/logs"
      - "{{ zk_mount_path }}/data"
  tasks:
    - name: Format disks
      filesystem:
        fstype: xfs
        dev: '{{ item }}'
      with_items:
        - "{{ disk_dev[0] }}"
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "{{ zk_mount_path }}", src: "{{ disk_dev[0] }}" }
    - file:
        path: "{{ item }}"
        state: absent
      loop: "{{ zk_path_list }}"
    - file:
        path: "{{ item }}"
        state: directory
      loop: "{{ zk_path_list }}"

- name: Format and mount disks for Pulsar/BookKeeper hosts
  hosts: pulsar
  connection: ssh
  become: true
  vars:
    pb_path_list:
      - "{{ pb_mount_path }}/journal"
      - "{{ pb_mount_path }}/storage"
  tasks:
    - name: Format disks
      filesystem:
        fstype: xfs
        dev: '{{ item }}'
      with_items:
        - "{{ disk_dev[0] }}"
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "{{ pb_mount_path }}", src: "{{ disk_dev[0] }}" }
    - file:
        path: "{{ item }}"
        state: absent
      loop: "{{ pb_path_list }}"
    - file:
        path: "{{ item }}"
        state: directory
      loop: "{{ pb_path_list }}"

#- name: Install Node exporter on Brokers to collect system metrics
#  hosts: pulsar
#  become: true
#  tasks:
#    - name: Add user node_exporter
#      user:
#        name: node_exporter
#        shell: /bin/false
#        system: true
#        create_home: no
#    - name: Download and extract
#      unarchive:
#        src: "/home/ubuntu/pkg/node_exporter-1.2.2.linux-amd64.tar.gz"
#        dest: /tmp
#        remote_src: "false"
#
#    - name: Copy bin node_exporter to /usr/local/bin
#      copy:
#        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
#        remote_src: yes
#        dest: /usr/local/bin/
#        owner: node_exporter
#        group: node_exporter
#        mode: u+x,g+x,o+x
#
#    - name: Create service node_exporter.service
#      blockinfile:
#        path: /etc/systemd/system/node_exporter.service
#        block: |
#          [Unit]
#          Description=Prometheus Node Exporter
#          Wants=network-online.target
#          After=network-online.target
#          [Service]
#          User=node_exporter
#          Group=node_exporter
#          Type=simple
#          ExecStart=/usr/local/bin/node_exporter
#          [Install]
#          WantedBy=multi-user.target
#        create: true
#
#    - name: systemctl daemon_reload
#      systemd:
#        daemon_reload: yes
#
#    - name: Start and Enable node_exporter
#      service:
#        name: node_exporter
#        state: started
#        enabled: yes
#
#    - name: Check whether port 9100 is available
#      wait_for:
#        port: 9100
#        state: started
#        timeout: 5

- name: install packages and set env
  hosts: pulsar:client:zookeeper
  connection: ssh
  become: true
  tags: [install]
  tasks:
    - name: Update and upgrade apt packages
      become: true
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400
    - name: Install packages
      apt: pkg={{ item }} state=latest
      with_items:
        - wget
        - tuned
        - openjdk-17-jdk
        - sysstat
        - vim
        - chrony
    - name: Change locale to en_US.utf-8
      shell: |
        echo 'LANG=en_US.utf-8
              LC_ALL=en_US.utf-8' > /etc/environment

- name: Pulsar installation
  hosts: pulsar:zookeeper
  connection: ssh
  become: true
  tags: [install]
  tasks:
    - file: path=/opt/pulsar state=absent
    - file: path=/opt/pulsar state=directory
    - name: Download Pulsar binary package
      unarchive:
        src: "{{ pulsar_binary.src }}"
        remote_src: "{{ pulsar_binary.remote }}"
        dest: /opt/pulsar
        extra_opts: ["--strip-components=1"]
    - tags: [always]
      set_fact:
        max_heap_memory: "{{ pulsar_max_heap_memory | default('6g') }}"
        max_direct_memory: "{{ pulsar_max_direct_memory | default('6g') }}"
    - template:
        src: "templates/pulsar_env.sh"
        dest: "/opt/pulsar/conf/pulsar_env.sh"
    - template:
        src: "templates/bkenv.sh"
        dest: "/opt/pulsar/conf/bkenv.sh"

- name: Protocol Handlers installation
  tags: [protocol_handler]
  hosts: pulsar
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/pulsar/protocols state=absent
    - file: path=/opt/pulsar/protocols state=directory
    - name: Upload local protocol handlers
      copy:
        src: "{{ item.local_path }}"
        dest: /opt/pulsar/protocols
      loop: "{{ protocol_handlers }}"
      when:
        - protocol_handlers is defined
        - item.local_path is defined
    - name: Download protocol handlers
      get_url:
        url: "{{ item.url }}"
        dest: /opt/pulsar/protocols
      loop: "{{ protocol_handlers }}"
      when:
        - protocol_handlers is defined
        - item.local_path is not defined


- name: ZooKeeper setup
  hosts: zookeeper
  connection: ssh
  become: true
  tasks:
    - set_fact:
        zid: "{{ groups['zookeeper'].index(inventory_hostname) }}"
        max_heap_memory: "{{ zookeeper_max_heap_memory | default('8G') }}"
        max_direct_memory: "{{ zookeeper_max_direct_memory | default('2G') }}"
      tags: [always]
    - file:
        path: "/opt/pulsar/{{ item }}"
        state: directory
      with_items:
        - data/zookeeper
    - template:
        src: "templates/pulsar_env.sh"
        dest: "/opt/pulsar/conf/pulsar_env.sh"
    - template:
        src: "templates/zoo.cfg"
        dest: "/opt/pulsar/conf/zookeeper.conf"
    - template:
        src: templates/myid
        dest: "{{ zk_mount_path }}/data/myid"
    - template:
        src: "templates/zookeeper.service"
        dest: "/etc/systemd/system/zookeeper.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "zookeeper"

- name: BookKeeper setup
  hosts: pulsar
  tags: [bk_setup]
  connection: ssh
  become: true
  tasks:
    - command: >
        bin/pulsar initialize-cluster-metadata --cluster local
        --zookeeper {{ hostvars[groups['zookeeper'][0]].private_ip }}:2181
        --configuration-store {{ hostvars[groups['zookeeper'][0]].private_ip }}:2181
        --web-service-url {{ httpUrl }}
        --broker-service-url {{ serviceUrl }}
      args:
        chdir: /opt/pulsar
      when: groups['pulsar'][0] == inventory_hostname
    - set_fact:
        skip_journal: "{{ skip_journal | default(false) }}"
      tags: [always]
    - name: Apply BookKeeper configuration file [Bypass Journal]
      template:
        src: "templates/bookkeeper-skip-journal.conf"
        dest: "/opt/pulsar/conf/bookkeeper.conf"
      when: skip_journal|bool
    - name: Apply BookKeeper configuration file
      template:
        src: "templates/bookkeeper.conf"
        dest: "/opt/pulsar/conf/bookkeeper.conf"
      when: not skip_journal|bool
    - name: Install bookkeeper systemd service
      template:
        src: "templates/bookkeeper.service"
        dest: "/etc/systemd/system/bookkeeper.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "bookkeeper"

- name: Pulsar configuration and systemd setup
  hosts: pulsar
  connection: ssh
  become: true
  tags: [configure,protocol_handler]
  tasks:
    - name: Set up broker
      template:
        src: "templates/broker.conf"
        dest: "/opt/pulsar/conf/broker.conf"
    - template:
        src: "templates/pulsar.service"
        dest: "/etc/systemd/system/pulsar.service"
    - template:
        src: "templates/{{ item.conf }}"
        dest: "/opt/pulsar/conf/{{ item.conf }}"
      loop: "{{ protocol_handlers }}"
      when: protocol_handlers is defined
    - set_fact:
        protocols: "{{ protocols | default([]) + [ item.protocol ]}}"
      loop: "{{ protocol_handlers }}"
      when: protocol_handlers is defined
      tags: [always]
    - name: Enable protocol handlers
      lineinfile:
        path: /opt/pulsar/conf/broker.conf
        line: "messagingProtocols={{ protocols | join(',') }}"
      when: protocols is defined
    - name: Read configurations of all protocol handlers
      shell: |
        grep -v "^#" "{{ '/opt/pulsar/conf/' + item.conf }}"
      loop: "{{ protocol_handlers }}"
      when: protocol_handlers is defined
      register: conf_files
    - name: Update broker.conf for protocol handlers
      lineinfile:
        path: /opt/pulsar/conf/broker.conf
        line: "{{ item.stdout_lines | join('\n') }}"
      loop: "{{ conf_files.results }}"
      when:
        - protocol_handlers is defined
        - conf_files is defined
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "pulsar"

- name: Chrony setup
  hosts: client
  connection: ssh
  become: true
  tags: [configure]
  tasks:
    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "/etc/chrony.conf"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "chronyd"


- name: Pulsar benchmarking client setup
  hosts: client
  connection: ssh
  tags: [client]
  become: true
  tasks:
    - file: path=/opt/pulsar/conf state=absent
    - file: path=/opt/pulsar/conf state=directory
    - name: Set up client config
      template:
        src: "templates/client.conf"
        dest: "/opt/pulsar/conf/client.conf"
    - file: path=/opt/benchmark state=absent
    - name: Copy benchmark code
      unarchive:
        src: ../../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark

    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"

    - name: handle pulsar drivers
      when: protocol_handlers is not defined
      block:
        - name: Get list of driver config files
          raw: ls -1 /opt/benchmark/driver-pulsar/*.yaml
          register: drivers_list
        - name: Configure service URL
          lineinfile:
            dest: '{{ item }}'
            regexp: '^  serviceUrl\: '
            line: '  serviceUrl: {{ serviceUrl }}'
          with_items: '{{ drivers_list.stdout_lines }}'
        - name: Configure http URL
          lineinfile:
            dest: '{{ item }}'
            regexp: '^  httpUrl: '
            line: '  httpUrl: {{ httpUrl }}'
          with_items: '{{ drivers_list.stdout_lines }}'

        - name: Get list of jms driver config files
          raw: ls -1 /opt/benchmark/driver-jms/pulsar*.yaml
          register: jms_drivers_list
        - name: Configure JMS service URL
          lineinfile:
            dest: '{{ item }}'
            regexp: '^  serviceUrl\: '
            line: '  serviceUrl: {{ serviceUrl }}'
          with_items: '{{ jms_drivers_list.stdout_lines }}'
        - name: Configure JMS service Connection Handler
          ansible.builtin.replace:
            dest: '{{ item }}'
            regexp: 'pulsar\:\/\/localhost\:6650'
            replace: '{{ serviceUrl }}'
          with_items: '{{ jms_drivers_list.stdout_lines }}'
        - name: Configure JMS http URL
          lineinfile:
            dest: '{{ item }}'
            regexp: '^  httpUrl: '
            line: '  httpUrl: {{ httpUrl }}'
          with_items: '{{ jms_drivers_list.stdout_lines }}'
        - name: Configure JMS http Connection Handler
          ansible.builtin.replace:
            dest: '{{ item }}'
            regexp: 'http\:\/\/localhost\:8080'
            replace: '{{ httpUrl }}'
          with_items: '{{ jms_drivers_list.stdout_lines }}'

    - name: handle kop drivers
      when: protocol_handlers is defined
      block:
        - name: Get list of kop driver config files
          raw: ls -1 /opt/benchmark/driver-kop/*.yaml
          register: kop_drivers_list
        - name: Configure kop bootstrap servers
          lineinfile:
            dest: '{{ item }}'
            regexp: '^  bootstrap.servers='
            line: "  bootstrap.servers={{ hostvars[groups['pulsar'][0]].private_ip }}:9092 "
          with_items: '{{ kop_drivers_list.stdout_lines }}'

    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark-worker
        regexp: '^JVM_MEM='
        line: 'JVM_MEM="-Xms16G -Xmx16G -XX:+UseZGC"'
    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark
        regexp: '^JVM_MEM='
        line: 'JVM_MEM="-Xmx4G"'
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"

#- name: Prometheus installation
#  hosts: prometheus
#  connection: ssh
#  tags: [prometheus]
#  become: true
#  tasks:
#    - name: Install Docker
#      block:
#        - name: Download Docker installer
#          get_url:
#            url: https://get.docker.com
#            dest: /tmp/get-docker.sh
#            mode: '0755'
#            force: 'yes'
#        - name: Install Docker
#          command: /tmp/get-docker.sh
#        - name: Add ansible user to docker group
#          user:
#            name: "{{ ansible_user }}"
#            groups: docker
#            append: yes
#    - name: Start docker
#      service:
#        name: docker
#        state: started
#        enabled: yes
#    - file: path=/opt/prometheus state=absent
#    - file: path=/opt/prometheus state=directory
#    - name: Download Prometheus Binary Package
#      unarchive:
#        src: "{{ prometheus_binary.src }}"
#        remote_src: "{{ prometheus_binary.remote }}"
#        dest: /opt/prometheus
#        extra_opts: ["--strip-components=1"]
#
#- name: Prometheus setup
#  hosts: prometheus
#  connection: ssh
#  tags: [prometheus]
#  become: true
#  tasks:
#    - file: path=/opt/pulsar state=absent
#    - file: path=/opt/pulsar state=directory
#    - file:
#        path: "/opt/prometheus/{{ item }}"
#        state: directory
#      with_items:
#        - data
#    - template:
#        src: "templates/prometheus.service"
#        dest: "/etc/systemd/system/prometheus.service"
#    - template:
#        src: "templates/pulsar-dashboard.service"
#        dest: "/etc/systemd/system/pulsar-dashboard.service"
#    - template:
#        src: "templates/prometheus.yml"
#        dest: "/opt/prometheus/prometheus.yml"
#    - systemd:
#        state: restarted
#        daemon_reload: yes
#        name: "prometheus"
#    - systemd:
#        state: restarted
#        daemon_reload: yes
#        name: "pulsar-dashboard"

- name: List host addresses
  hosts: localhost
  become: false
  tags: [always]
  tasks:
    - debug:
        msg: "Zookeeper servers {{ item }}"
      with_items: "{{ groups['zookeeper'] }}"
    - debug:
        msg: "Pulsar/BookKeeper servers {{ item }}"
      with_items: "{{ groups['pulsar'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"
#    - debug:
#        msg: "Prometheus servers {{ item }}"
#      with_items: "{{ groups['prometheus'] }}"
