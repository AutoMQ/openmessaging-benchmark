#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Deploy a es cluster
  ansible.builtin.import_playbook: es-kafka-deploy.yaml

- name: Format and mount disks for Kafka hosts
  hosts: [controller, broker]
  connection: ssh
  become: true
  tasks:
    - command: >
        tuned-adm profile latency-performance
    - name: Format disks
      filesystem:
        fstype: xfs
        dev: '{{ item }}'
      with_items:
        - '/dev/nvme1n1'
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "/mnt/data-1", src: "/dev/nvme1n1" }
    - name: Increase hard file descriptor limit
      pam_limits:
        domain: '*'
        limit_type: 'hard'
        limit_item: nofile
        value: 500000
    - name: Increase soft file descriptor limit
      pam_limits:
        domain: '*'
        limit_type: 'soft'
        limit_item: nofile
        value: 500000
    - name: Enable pam_limits.so
      lineinfile:
        path: /etc/pam.d/login
        insertafter: EOF
        line: 'session required pam_limits.so'
    - name: set vm.max_map_count
      sysctl:
        name: vm.max_map_count
        value: '262144'
        state: present
        reload: yes
    - name: Reboot the machine with all defaults
      reboot:

- name: General setup for all
  hosts: [controller, broker, client]
  connection: ssh
  become: true
  tasks:
    - name: Install RPM packages
      apt: pkg={{ item }} state=latest
      with_items:
        - wget
        - openjdk-17-jdk
        - sysstat
        - vim
        - chrony
    - name: Set common facts
      set_fact:
        controllerServers: "{{ groups['controller'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9093') | join(',') }}"
        brokerServers: "{{ groups['broker'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9092') | join(',') }}"
        privateIp: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    - name: Change locale to en_US.utf-8
      shell: |
        echo 'LANG=en_US.utf-8
              LC_ALL=en_US.utf-8' > /etc/environment

- name: Kafka general setup
  hosts: [controller, broker]
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/kafka state=absent
    - file: path=/opt/kafka state=directory
    - name: Generate quorum servers
      set_fact:
        quorumServers: "{{ quorumServers | default('') + (itemIndex + 1) | string + '@' + item + ',' }}"
      loop: "{{ groups['controller'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9093') }}"
      loop_control:
        index_var: itemIndex
    - name: Set common facts
      set_fact:
        quorumServers: "{{ quorumServers[:-1] }}"
        kafkaVersion: "3.4.0"
        KAFKA_CLUSTER_ID: "XPufKTN9T1SpE82LDKwXwA"
    - name: Download Kafka package
      unarchive:
        src: "http://archive.apache.org/dist/kafka/{{ kafkaVersion }}/kafka_2.13-{{ kafkaVersion }}.tgz"
        remote_src: yes
        dest: /opt/kafka
        extra_opts: ["--strip-components=1"]

# setting controllers.
- name: Setup Kafka controllers
  hosts: controller
  connection: ssh
  become: true
  tasks:
    - name: Set nodeId
      set_fact:
        nodeId: "{{ groups['controller'].index(inventory_hostname) + 1 }}"
    - template:
        src: "templates/controller.properties"
        dest: "/opt/kafka/config/kraft/controller.properties"
    - template:
        src: "templates/controller.service"
        dest: "/etc/systemd/system/controller.service"
    - name: Format Log Directories
      shell: bin/kafka-storage.sh format -t {{ KAFKA_CLUSTER_ID }} -c config/kraft/controller.properties
      args:
        chdir: /opt/kafka/
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "controller"
      tags: [restart-controller]


- name: Setup Kafka brokers
  hosts: broker
  connection: ssh
  become: true
  tasks:
    - name: Set nodeId
      set_fact:
        nodeId: "{{  (groups['controller'] | length) + groups['broker'].index(inventory_hostname) + 1 }}"
    - name: Set up broker
      template:
        src: "templates/broker.properties"
        dest: "/opt/kafka/config/kraft/broker.properties"
    - template:
        src: "templates/broker.service"
        dest: "/etc/systemd/system/broker.service"
    - name: Format Log Directories
      shell: bin/kafka-storage.sh format -t {{ KAFKA_CLUSTER_ID }} -c config/kraft/broker.properties
      args:
        chdir: /opt/kafka/
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "broker"
      tags: [restart-broker]


- name: Setup Benchmark client
  hosts: client
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/benchmark state=absent
      tags: [client-code]
    - name: Copy benchmark code
      unarchive:
        src: ../../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
      tags: [client-code]
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark
      tags: [client-code]
    - shell: tuned-adm profile latency-performance

    - name: Get list of driver config files
      raw: ls -1 /opt/benchmark/driver-kafka/*.yaml
      register: drivers_list
      tags: [client-code]

    - name: Configure Bootstrap Servers
      lineinfile:
        dest: '{{ item }}'
        regexp: '^  bootstrap.servers='
        line: '  bootstrap.servers={{ brokerServers }}'
      with_items: '{{ drivers_list.stdout_lines }}'
      tags: [client-code]

    - name: Get list of jms driver config files
      raw: ls -1 /opt/benchmark/driver-jms/kafka*.yaml
      register: jms_drivers_list

    - name: Configure JMS Bootstrap Servers
      lineinfile:
        dest: '{{ item }}'
        regexp: '^  bootstrap.servers='
        line: '  bootstrap.servers={{ brokerServers }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'

    - name: Configure JMS Connection Factory
      ansible.builtin.replace:
        dest: '{{ item }}'
        regexp: 'localhost\:9092'
        replace: '{{ brokerServers }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'

    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark-worker
        regexp: '^JVM_MEM='
        line: 'JVM_MEM="-Xms100G -Xmx100G -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:+ParallelRefProcEnabled -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=12 -XX:ConcGCThreads=12 -XX:+DisableExplicitGC -XX:-ResizePLAB"'
      tags: [client-code]
    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark
        regexp: '^JVM_MEM='
        line: 'JVM_MEM="-Xmx4G"'
      tags: [client-code]
    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
      tags: [client-code]
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
      tags: [client-code]
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"
      tags: [client-code]

    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "/etc/chrony.conf"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "chronyd"


- name:  Hosts addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: "Kafka controller servers {{ item }}"
      with_items: "{{ groups['controller'] }}"
    - debug:
        msg: "Kafka brokers {{ item }}"
      with_items: "{{ groups['broker'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"
